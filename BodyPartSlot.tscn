[gd_scene load_steps=10 format=2]

[ext_resource path="res://materials/concrete/concrete_tex_ld.png" type="Texture" id=1]
[ext_resource path="res://materials/concrete/concrete_height_ld.png" type="Texture" id=2]
[ext_resource path="res://materials/concrete/concrete_spec_ld.png" type="Texture" id=3]
[ext_resource path="res://materials/concrete/concrete_ld.png" type="Texture" id=4]
[ext_resource path="res://container.png" type="Texture" id=5]
[ext_resource path="res://BodyPartSlot.gd" type="Script" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform float subsurface_scattering_strength : hint_range(0,1);
uniform sampler2D texture_subsurface_scattering : hint_white;
uniform sampler2D texture_depth : hint_black;
uniform float depth_scale;
uniform int depth_min_layers;
uniform int depth_max_layers;
uniform vec2 depth_flip;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
	float sss_tex = triplanar_texture(texture_subsurface_scattering,uv1_power_normal,uv1_triplanar_pos).r;
	SSS_STRENGTH=subsurface_scattering_strength*sss_tex;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.78125, 0.78125, 0.78125, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.2
shader_param/roughness = 0.7
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 0.333333, 0.333333, 0.333333, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 1.1
shader_param/subsurface_scattering_strength = 0.1
shader_param/depth_scale = 0.01
shader_param/depth_min_layers = 8
shader_param/depth_max_layers = 32
shader_param/depth_flip = Vector2( 1, 1 )
shader_param/uv1_blend_sharpness = 2.07053
shader_param/uv1_scale = Vector3( 0.25, 0.25, 0.25 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_metallic = ExtResource( 3 )
shader_param/texture_normal = ExtResource( 4 )
shader_param/texture_depth = ExtResource( 2 )

[sub_resource type="RectangleShape2D" id=3]

[node name="BodyPartSlot" type="Sprite"]
material = SubResource( 2 )
scale = Vector2( 0.4, 0.4 )
texture = ExtResource( 5 )
script = ExtResource( 6 )

[node name="BodyPartSlotArea" type="Area2D" parent="."]
scale = Vector2( 0.4, 0.4 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BodyPartSlotArea"]
shape = SubResource( 3 )
[connection signal="body_entered" from="BodyPartSlotArea" to="." method="_on_BodyPartSlotArea_body_entered"]
[connection signal="body_shape_entered" from="BodyPartSlotArea" to="." method="_on_BodyPartSlotArea_body_shape_entered"]
